#! /usr/bin/env ruby

help = File.expand_path(File.join("..", "README"), File.dirname(__FILE__))

if ARGV.empty?
  exec "${PAGER:-less} #{help}"
end

require "clap"
require "json"

trap(:INT) { puts; exit 1 }

def recipes_for(assigned_roles)
  [].tap do |recipes|
    assigned_roles.each do |name|
      if roles[name]
        recipes.concat(recipes_for(roles[name]))
      else
        recipes.push(name)
      end
    end
  end
end

def path(*parts)
  File.expand_path(File.join(*parts), ENV["TELE_HOME"])
end

def ssh(server, script)
  %x{bash -c "ssh -T -F #{path("ssh_config")} #{server} < #{script} > >(logger -t 'tele/#{server}') 2>&1"}
  $?.exitstatus
end

def layout
  $layout ||= JSON.parse(File.read(path("layout.json")))
end

def servers
  layout["servers"]
end

def roles
  layout["roles"]
end

def run(server, recipe)
  script = path("recipes", "#{recipe}.sh")

  if File.exist?(script)
    ssh(server, script)
  end
end

out = Module.new do
  def self.server(name)
    puts name
  end

  def self.error
    puts "\033[01;31mERROR\033[00m"
  end

  def self.ok
    puts "\033[01;32mOK\033[00m"
  end

  def self.unknown
    puts "?"
  end
end

###

ENV["TELE_HOME"] ||= File.join(Dir.pwd, ".tele")

commands = Clap.run ARGV,
  "-h" => lambda {
    exec "${PAGER:-less} #{help}"
  },
  "-d" => lambda { |path|
    ENV["TELE_HOME"] = File.join(Dir.pwd, path)
  }

Clap.run commands,
  "init" => lambda {
    source = File.expand_path("../templates/.tele", File.dirname(__FILE__))
    target = File.expand_path(Dir.pwd)

    %x{cp -r #{source} #{target}}
    out.done
  }

unless File.directory?(path)
  $stderr.puts "Couldn't find a .tele directory"
  exit 1
end

Clap.run commands,
  "deploy" => lambda {
    servers.each do |server, assigned_roles|
      out.server(server)

      recipes_for(assigned_roles).each do |recipe|
        print "  #{recipe}: "

        case run(server, recipe)
        when nil
          out.unknown
        when 0
          out.ok
        else
          out.error
        end
      end

      puts
    end
  }
